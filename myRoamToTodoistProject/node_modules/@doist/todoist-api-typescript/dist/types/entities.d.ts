import { Boolean, Number as NumberRunType, String, Array, Record, Static, Partial, Literal, Union } from 'runtypes';
export declare const Int: import("runtypes").Constraint<NumberRunType, number, unknown>;
export declare type TodoistEntity = {
    id: string;
};
export declare type OrderedEntity = TodoistEntity & {
    order: number;
};
export declare type EntityInHierarchy = OrderedEntity & {
    parentId?: string | null;
};
export declare const DueDate: import("runtypes").Intersect<[Record<{
    isRecurring: Boolean;
    string: String;
    date: String;
}, false>, Partial<{
    datetime: Union<[String, Literal<null>]>;
    timezone: Union<[String, Literal<null>]>;
}, false>]>;
export declare type DueDate = Static<typeof DueDate>;
export declare const Task: import("runtypes").Intersect<[Record<{
    id: String;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    content: String;
    description: String;
    projectId: String;
    isCompleted: Boolean;
    labels: Array<String, false>;
    priority: import("runtypes").Constraint<NumberRunType, number, unknown>;
    commentCount: import("runtypes").Constraint<NumberRunType, number, unknown>;
    createdAt: String;
    url: String;
    creatorId: String;
}, false>, Partial<{
    due: Union<[import("runtypes").Intersect<[Record<{
        isRecurring: Boolean;
        string: String;
        date: String;
    }, false>, Partial<{
        datetime: Union<[String, Literal<null>]>;
        timezone: Union<[String, Literal<null>]>;
    }, false>]>, Literal<null>]>;
    assigneeId: Union<[String, Literal<null>]>;
    assignerId: Union<[String, Literal<null>]>;
    parentId: Union<[String, Literal<null>]>;
    sectionId: Union<[String, Literal<null>]>;
}, false>]>;
export declare type Task = Static<typeof Task>;
export declare const Project: import("runtypes").Intersect<[Record<{
    id: String;
    name: String;
    color: String;
    commentCount: import("runtypes").Constraint<NumberRunType, number, unknown>;
    isShared: Boolean;
    isFavorite: Boolean;
    url: String;
    isInboxProject: Boolean;
    isTeamInbox: Boolean;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    viewStyle: String;
}, false>, Partial<{
    parentId: Union<[String, Literal<null>]>;
}, false>]>;
export declare type Project = Static<typeof Project>;
export declare const Section: Record<{
    id: String;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    projectId: String;
}, false>;
export declare type Section = Static<typeof Section>;
export declare const Label: Record<{
    id: String;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    color: String;
    isFavorite: Boolean;
}, false>;
export declare type Label = Static<typeof Label>;
export declare const Attachment: import("runtypes").Intersect<[Record<{
    resourceType: String;
}, false>, Partial<{
    fileName: Union<[String, Literal<null>]>;
    fileSize: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
    fileType: Union<[String, Literal<null>]>;
    fileUrl: Union<[String, Literal<null>]>;
    fileDuration: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
    uploadState: Union<[Union<[Literal<"pending">, Literal<"completed">]>, Literal<null>]>;
    image: Union<[String, Literal<null>]>;
    imageWidth: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
    imageHeight: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
    url: Union<[String, Literal<null>]>;
    title: Union<[String, Literal<null>]>;
}, false>]>;
export declare type Attachment = Static<typeof Attachment>;
export declare const Comment: import("runtypes").Intersect<[Record<{
    id: String;
    content: String;
    postedAt: String;
}, false>, Partial<{
    taskId: Union<[String, Literal<null>]>;
    projectId: Union<[String, Literal<null>]>;
    attachment: Union<[import("runtypes").Intersect<[Record<{
        resourceType: String;
    }, false>, Partial<{
        fileName: Union<[String, Literal<null>]>;
        fileSize: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
        fileType: Union<[String, Literal<null>]>;
        fileUrl: Union<[String, Literal<null>]>;
        fileDuration: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
        uploadState: Union<[Union<[Literal<"pending">, Literal<"completed">]>, Literal<null>]>;
        image: Union<[String, Literal<null>]>;
        imageWidth: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
        imageHeight: Union<[import("runtypes").Constraint<NumberRunType, number, unknown>, Literal<null>]>;
        url: Union<[String, Literal<null>]>;
        title: Union<[String, Literal<null>]>;
    }, false>]>, Literal<null>]>;
}, false>]>;
export declare type Comment = Static<typeof Comment>;
export declare const User: Record<{
    id: String;
    name: String;
    email: String;
}, false>;
export declare type User = Static<typeof User>;
export declare type Color = {
    /**
     * @deprecated No longer used
     */
    id: number;
    /**
     * The key of the color (i.e. 'berry_red')
     */
    key: string;
    /**
     * The display name of the color (i.e. 'Berry Red')
     */
    displayName: string;
    /**
     * @deprecated Use {@link Color.displayName} instead
     */
    name: string;
    /**
     * The hex value of the color (i.e. '#b8255f')
     */
    hexValue: string;
    /**
     * @deprecated Use {@link Color.hexValue} instead
     */
    value: string;
};
export declare type QuickAddTaskResponse = {
    id: string;
    projectId: string;
    content: string;
    description: string;
    priority: number;
    sectionId: string | null;
    parentId: string | null;
    childOrder: number;
    labels: string[];
    responsibleUid: string | null;
    checked: boolean;
    addedAt: string;
    addedByUid: string | null;
    due: {
        date: string;
        timezone: string | null;
        isRecurring: boolean;
        string: string;
        lang: string;
    } | null;
};
